{"name":"Namespacetrie","tagline":"A Trie implementation that manages not the single characters  but treats its values as typical namespaces.","body":"[![Build Status](https://secure.travis-ci.org/knutwalker/namespacetrie.png?branch=master)](http://travis-ci.org/knutwalker/namespacetrie)\r\n\r\nThis is the Namespace Trie.\r\n\r\nNamespace Trie is a implementation of a Trie data structure.  Unlike typical\r\nimplementations, which are splitting its value into single characters,\r\nNamespace Trie treats its values as namespaces.  Namespaces are strings that\r\nare delimited by a period. Such namespaces often occur in programming\r\nlanguages, e.g. Java or Python and may also appear while using some libraries\r\nfor programming languages that itself do not offer namespacing (e.g. the\r\nGoogle Closure library offers a namespace feature for JavaScript).  The\r\nNamespace Trie may help you find flaws in the namespace structure.\r\n\r\nNamespace Trie is developed for use with Closure Depresolver and may at the\r\nmoment not be very useful as there is not standalone interface.\r\n\r\n\r\n## Install\r\n\r\nfrom pip:\r\n\r\n    pip install namespacetrie\r\n\r\nfrom source:\r\n\r\n    pip install git+git://github.com/knutwalker/namespacetrie.git\r\n\r\n\r\n## Usage\r\n\r\n```python\r\nfrom namespacetrie.nstrie import NsTrie\r\nmodules = ['com.example.foo', 'com.example.bar', 'com.example.baz.Foo',\r\n           'com.example.baz.Bar', 'org.example']\r\ntrie = NsTrie(modules)\r\n'com.example' in trie\r\n# True\r\n\r\ntrie.has('com.example')\r\n# False\r\n\r\ntrie.has('com.example', False)\r\n# True\r\n\r\ntrie.has('com.example.foo')\r\n# True\r\n\r\nnode = trie.get('com.example')\r\nnode.keys()\r\n# ['foo', 'bar', 'baz']\r\n\r\ntrie.to_dict()\r\n# {'com': {'example': {'bar': 'com.example.bar',\r\n#    'baz': {'Bar': 'com.example.baz.Bar', 'Foo': 'com.example.baz.Foo'},\r\n#    'foo': 'com.example.foo'}},\r\n#  'org': {'example': 'org.example'}}\r\n\r\nlist(trie.iterdepth())\r\n# ['com', 'com.example', 'com.example.foo', 'com.example.bar',\r\n#  'com.example.baz', 'com.example.baz.Foo', 'com.example.baz.Bar',\r\n#  'org', 'org.example']\r\n\r\nlist(trie.iterbreadth())\r\n# ['com', 'org', 'com.example', 'org.example', 'com.example.foo',\r\n#  'com.example.bar', 'com.example.baz', 'com.example.baz.Foo',\r\n#  'com.example.baz.Bar']\r\n\r\ntrie.remove('com')\r\nlist(trie)\r\n# [('org', [('example', 'org.example')])]\r\n```\r\n","google":"UA-45861502-2","note":"Don't delete this file! It's used internally to help with page regeneration."}